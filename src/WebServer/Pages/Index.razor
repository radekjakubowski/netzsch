@page "/"

@using Common
@using Microsoft.AspNetCore.SignalR
@using WebServer.Hubs
@using WebServer.Hubs.Abstractions
@using Microsoft.AspNetCore.SignalR.Client
@inject IHubContext<MessagingHub, IMessagingHub> messagingHub

@implements IAsyncDisposable

<PageTitle>Messages</PageTitle>

<h2>Messages</h2>
<p>Server connection id: @ConnectionId</p>

<div class="mt-3 d-flex flex-column">
    <h3>Server message to clients</h3>
    <input type="text" class="mt-1" placeholder="Server message to clients" @oninput="ServerMessageChanged"/>
</div>

<div class="mt-3 d-flex flex-column">
    <h3>Client messages to server</h3>
    @if (ClientMessages.Any())
    {
        <table class="table">
            <thead>
            <tr>
                    <th class="col-2">ClientId</th>
                    <th class="col-10">ClientMessage</th>
                </tr>
            </thead>
            <tbody>
                    @foreach (var kvp in ClientMessages)
                    {
                            <tr>
                                <td>@kvp.Key</td>
                                <td>@kvp.Value</td>
                            </tr>
                    }
            </tbody>
        </table>
    } 
    else {
        <p>No client messages! Please, provide some input in one of local applications instances</p>
    }
    
</div>

@code {
    private string _serverMessage = string.Empty;
    private HubConnection? hubConnection;

    public Dictionary<string, string> ClientMessages { get; set; } = new();

    private async Task ServerMessageChanged(ChangeEventArgs e)
    {
        _serverMessage = e.Value as string;

        await BroadcastServerMessage();
    }

    private async Task BroadcastServerMessage()
    {
        var message = new Message { ClientId = "web-server", Text = _serverMessage };
        await messagingHub.Clients.All.ReceiveServerMessage(message);
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = HubConnectionFactory.CreateHubConnection();
        hubConnection.On<Dictionary<string, string>>("ReceiveClientMessages", UpdateClientMessages);

        await hubConnection.StartAsync();
        await base.OnInitializedAsync();
    }

    public string? ConnectionId => hubConnection?.ConnectionId;

    private void UpdateClientMessages(Dictionary<string, string> messages)
    {
        ClientMessages = messages;
        RefreshView();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private void RefreshView()
    {
        InvokeAsync(() => StateHasChanged());
    }
}
